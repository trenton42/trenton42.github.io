<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Just a Blahg</title>
    <link href="http://ikso.us/feed.xml" rel="self" />
    <link href="http://ikso.us/" />
    <updated>2013-12-19T23:41:10+05:00</updated>
    <id>http://ikso.us/</id>
    <entry>
        <title type="html"><![CDATA[Attaching StringIO Data to a Mailgun Message]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-12-19-22-48.html"/>
        <published>2013-12-19T22:53:00+05:00</published>
        <updated>2013-12-19T23:41:10+05:00</updated>
        <id>http://ikso.us/2013/2013-12-19-22-48.html</id>
        <category scheme="http://ikso.us/tag/code/" term="code" label="code" />
        <category scheme="http://ikso.us/tag/python/" term="python" label="python" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>Recently i started using <a href="http://www.mailgun.com" title="Mailgun by Rackspace">Mailgun</a> for our outgoing messages. They have a very nice   <a href="http://documentation.mailgun.com" title="Mailgun API documentation">API</a>, and take a lot of the heavy lifting out of creating multipart messages.</p>
<p>If you are using <a href="http://docs.python-requests.org/en/latest/" title="Python Requests library">requests</a> (or <a href="https://github.com/dreid/treq/" title="Python Twisted Requests">treq</a>) to send the messages through their REST API, however, you may have noticed that you must specify &ldquo;attachment&rdquo; as the key, and an open file handle as the value. This works great if you are sending files from the filesystem, but if you need to send generated or in memory data as a file attachment, it just doesn&#39;t work. Added a <code>name</code> attribute to the StringIO class does the trick:</p>
<div class="highlight"><pre><span class="k">class</span> <span class="nc">NamedStringIO</span><span class="p">(</span><span class="n">StringIO</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">name</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">StringIO</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</pre></div>
<p>Now using their <a href="http://documentation.mailgun.com/quickstart.html#sending-messages" title="Mailgun example: sending a message">example</a> will work:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">paste.util</span> <span class="kn">import</span> <span class="n">MultiDict</span>

<span class="n">good</span> <span class="o">=</span> <span class="n">NamedStringIO</span><span class="p">(</span><span class="s">&quot;This is some good data&quot;</span><span class="p">,</span> <span class="s">&quot;good.txt&quot;</span><span class="p">)</span>
<span class="n">more</span> <span class="o">=</span> <span class="n">NamedStringIO</span><span class="p">(</span><span class="s">&quot;This is some more good data&quot;</span><span class="p">,</span> <span class="s">&quot;more.txt&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">send_complex_message</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
        <span class="s">&quot;https://api.mailgun.net/v2/samples.mailgun.org/messages&quot;</span><span class="p">,</span>
        <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s">&quot;api&quot;</span><span class="p">,</span> <span class="s">&quot;key-PUT_YER_KEY_HERE&quot;</span><span class="p">),</span>
        <span class="n">files</span><span class="o">=</span><span class="n">MultiDict</span><span class="p">([(</span><span class="s">&quot;attachment&quot;</span><span class="p">,</span> <span class="n">good</span><span class="p">),</span>
                         <span class="p">(</span><span class="s">&quot;attachment&quot;</span><span class="p">,</span> <span class="n">more</span><span class="p">)]),</span>
        <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;from&quot;</span><span class="p">:</span> <span class="s">&quot;Excited User &lt;me@samples.mailgun.org&gt;&quot;</span><span class="p">,</span>
              <span class="s">&quot;to&quot;</span><span class="p">:</span> <span class="s">&quot;foo@example.com&quot;</span><span class="p">,</span>
              <span class="s">&quot;cc&quot;</span><span class="p">:</span> <span class="s">&quot;baz@example.com&quot;</span><span class="p">,</span>
              <span class="s">&quot;bcc&quot;</span><span class="p">:</span> <span class="s">&quot;bar@example.com&quot;</span><span class="p">,</span>
              <span class="s">&quot;subject&quot;</span><span class="p">:</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span>
              <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Testing some Mailgun awesomness!&quot;</span><span class="p">,</span>
              <span class="s">&quot;html&quot;</span><span class="p">:</span> <span class="s">&quot;&lt;html&gt;HTML version of the body&lt;/html&gt;&quot;</span><span class="p">})</span>
</pre></div>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[A Picture is worth how many words? Part 1]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-12-05-13-01.html"/>
        <published>2013-12-05T00:00:00+05:00</published>
        <updated>2013-12-05T14:54:31+05:00</updated>
        <id>http://ikso.us/2013/2013-12-05-13-01.html</id>
        <category scheme="http://ikso.us/tag/code/" term="code" label="code" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>i was playing around with some imaging code, and started wondering what it would look like to create some images out of text. i have worked with stenography in the past, but this time i didn&#39;t want to hide the text, i wanted to pack the image with it.</p>
<p>First things first, i need some text. Time to turn to trusty <a href="http://www.gutenberg.org">Project Gutenberg</a>. i will be using the text of <a href="https://pypi.python.org/pypi/Pillow/2.2.1">Moby Dick</a> for this project.</p>
<div class="highlight"><pre><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;~/Desktop/pg2701.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1257274</span>
</pre></div>
<p>Now i need a couple of functions to help me get started. First, it doesn&#39;t really matter what kind of dimensions my image has, but i would like it to be roughly square.</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">math</span>

<span class="k">def</span> <span class="nf">getDimensions</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
    <span class="sd">&#39;&#39;&#39; Get a rough square based on the amount of data we have &#39;&#39;&#39;</span>
    <span class="n">bits</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="n">size</span><span class="p">))</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">floor</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">bits</span><span class="p">))</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">bits</span> <span class="o">/</span> <span class="n">w</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">w</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">h</span><span class="p">))</span>
</pre></div>
<p>i am also going to define a generator that will turn my data into a stream of data that will be able to be understood by <a href="http://www.gutenberg.org/ebooks/2701">PIL</a>.</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">toPixelStream</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
    <span class="sd">&#39;&#39;&#39; Takes a string and turns it into a sequence of pixel data &#39;&#39;&#39;</span>
    <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">start</span> <span class="o">+</span> <span class="n">size</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">:</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="p">(</span><span class="s">&#39; &#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
        <span class="k">yield</span> <span class="nb">tuple</span><span class="p">([</span><span class="nb">ord</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>
        <span class="n">start</span> <span class="o">+=</span> <span class="n">size</span>
</pre></div>
<p>Now i need to decide what image format to use. Here are some of my choices:</p>

<ul>
<li>PNG</li>
<li>JPG</li>
<li>GIF</li>
<li>TIFF</li>
</ul>
<p>JPG is out right away because it is a lossy format. There is no guarantee that any data we put into is going to come back out (i will show you an example in my next post).</p>
<p>GIF isn&#39;t real well suited either because it is an indexed format, and thus limits the number of colors we can use to represent our data. (But&hellip; there is a way&hellip;)</p>
<p>That leaves PNG and TIFF. This time, i will use PNG.</p>
<p>Remember that each pixel in a PNG has four components: Red, Green, Blue, and Alpha. Each of those is one byte, so we will be able to shove four characters into each pixel. Let&#39;s construct some image data!</p>
<div class="highlight"><pre><span class="n">imgdata</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">toPixelStream</span><span class="p">(</span><span class="n">words</span><span class="p">)]</span>
<span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgdata</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">314320</span>
<span class="k">print</span> <span class="n">imgdata</span><span class="p">[:</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[(</span><span class="mi">239</span><span class="p">,</span> <span class="mi">187</span><span class="p">,</span> <span class="mi">191</span><span class="p">,</span> <span class="mi">84</span><span class="p">),</span> <span class="p">(</span><span class="mi">104</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span> <span class="p">(</span><span class="mi">114</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">101</span><span class="p">),</span> <span class="p">(</span><span class="mi">99</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">71</span><span class="p">)]</span>
</pre></div>
<p>Now we have a list of tuples. Each tuple represents a pixel: (R, G, B, A), and each component of that pixel is the ord of a character in our text. All we have left is to write that out to a file.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>


<span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">&#39;RGBA&#39;</span><span class="p">,</span> <span class="n">getDimensions</span><span class="p">(</span><span class="n">words</span><span class="p">)))</span>
<span class="n">img</span><span class="o">.</span><span class="n">putdata</span><span class="p">(</span><span class="n">imgdata</span><span class="p">)</span>

<span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;~/Desktop/pg2701.png&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
<span class="n">img</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
<span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
<p>To the Desktop!</p>
<p><img src="/static/img/pg2701.png" alt="ing"/></p>
<p>And there it is! The entire work of Moby Dick in an image!</p>
<p>But wait, you say. How can we know that our data survived? Ok, let&#39;s try to pull our data back out of the image.</p>
<div class="highlight"><pre><span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;~/Desktop/pg2701.png&#39;</span><span class="p">)</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
<span class="n">newdata</span> <span class="o">=</span> <span class="n">im</span><span class="o">.</span><span class="n">getdata</span><span class="p">()</span>
<span class="n">book</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">pixel</span> <span class="ow">in</span> <span class="n">newdata</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">component</span> <span class="ow">in</span> <span class="n">pixel</span><span class="p">:</span>
        <span class="n">book</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">component</span><span class="p">))</span>
<span class="n">book</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="k">print</span> <span class="n">book</span><span class="p">[:</span><span class="mi">181</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;&quot;&quot;The Project Gutenberg EBook of Moby Dick; or The Whale, by Herman Melville</span>

<span class="s">This eBook is for the use of anyone anywhere at no cost and with</span>
<span class="s">almost no restrictions whatsoever.&quot;&quot;&quot;</span>
</pre></div>
<p>It worked!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Handy Sale Advertisement Guide.]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-12-02-12-47.html"/>
        <published>2013-12-02T00:00:00+05:00</published>
        <updated>2013-12-02T13:05:32+05:00</updated>
        <id>http://ikso.us/2013/2013-12-02-12-47.html</id>
        <category scheme="http://ikso.us/tag/boring-posts/" term="boring posts" label="boring posts" />
        <category scheme="http://ikso.us/tag/life/" term="life" label="life" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>In this holiday season (and pretty much any other time, now) it is nearly impossible to avoid the bombardment of advertisements. Maybe i&#39;ve been growing cynical, but i have become a lot more antagonistic toward companies that advertise in ways i don&#39;t like. So here is the handy guide i use to interpret ads.</p>

<ol>
<li><p>Sign says: &ldquo;Deals starting at just $20!&rdquo;</p>
<p>i read: &ldquo;Absolutely nothing under $20&rdquo;</p></li>
<li><p>Sign says: &ldquo;Save at up to $10!&rdquo;</p>
<p>i read: &ldquo;You cannot save more than $10&rdquo;</p></li>
<li><p>Sign says: &ldquo;Buy one get one half off&rdquo;</p>
<p>i read: &ldquo;Spend 50% more than you were planning&rdquo;</p></li>
<li><p>Product has a celebrity endorsement</p>
<p>We could not sell this product without bribing someone rich and famous to say it&#39;s good.</p></li>
<li><p>Sign says: &ldquo;Make your holiday complete&hellip;&rdquo;</p>
<p>i read: &ldquo;You will be complete&hellip; until we release the next version&rdquo;</p></li>
</ol>
<p>Obviously there are a lot more of these, and i will add more as i think of them. In the mean time, happy holidays!</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Black Friday.]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-11-29-15-12.html"/>
        <published>2013-11-29T00:00:00+05:00</published>
        <updated>2013-11-29T16:00:50+05:00</updated>
        <id>http://ikso.us/2013/2013-11-29-15-12.html</id>
        <category scheme="http://ikso.us/tag/life/" term="life" label="life" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>Black Friday means something quite different to me. See, three years ago on Black Friday, i was mugged. Not a &ldquo;Hey you, give me your wallet&rdquo; kind of mugging, but more of the &ldquo;We&#39;ll just smash your face and not ask&rdquo; kind. i woke up in the hospital without any memory of what happened (in fact, i lost several hours worth of memories). i went through two surgeries, and had my jaw wired shut for a couple of months, but it could have been a lot worse &ndash; especially for my family.</p>
<p>It took a smash to the face to help me realize how much i have to be thankful for, and how much the things i do affect those around me. i certainly hope that it won&#39;t take something so drastic to do the same for you.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Theme Uploaded]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-11-18-09-34.html"/>
        <published>2013-11-18T00:00:00+05:00</published>
        <updated>2013-11-18T10:35:12+05:00</updated>
        <id>http://ikso.us/2013/2013-11-18-09-34.html</id>
        <category scheme="http://ikso.us/tag/code/" term="code" label="code" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>I whipped up this theme for <a href="https://github.com/lepture/liquidluck">liquidluck</a> recently. It is based on Bootstrap 3, and doesn&#39;t contain many bells or whistles (as you can see).</p>
<p>Clone it here <a href="https://github.com/trenton42/liquidluck-theme-bootstrap3">https://github.com/trenton42/liquidluck-theme-bootstrap3</a></p>
<p>i will (hopefully) be working on some improvements in the future.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[New day, new attempt]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/2013-11-16-00-58.html"/>
        <published>2013-11-16T00:00:00+05:00</published>
        <updated>2013-11-16T01:07:43+05:00</updated>
        <id>http://ikso.us/2013/2013-11-16-00-58.html</id>
        <category scheme="http://ikso.us/tag/boring-posts/" term="boring posts" label="boring posts" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>Just finished a little work with <a href="https://github.com/lepture/liquidluck">liquidluck</a>. i hadn&#39;t heard of it before, but <a href="http://zigg.com">zigg</a> mentioned it, so i thought i would give it a try. Honestly, i wasn&#39;t really sure about yet another static site generator, but so far i am impressed. Now if only i can keep writing things down.</p>
<p>i will also hopefully get the template i made for it packaged up. i&#39;m not completely satisfied with it, but it will keep me going for the time being. But for now, it&#39;s time to sleep.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Post in the first.]]></title>
        <author><name>ikso</name></author>
        <link href="http://ikso.us/2013/test.html"/>
        <published>2013-11-15T00:00:00+05:00</published>
        <updated>2013-11-15T11:54:52+05:00</updated>
        <id>http://ikso.us/2013/test.html</id>
        <category scheme="http://ikso.us/tag/boring-posts/" term="boring posts" label="boring posts" />
        <content type="html" xml:base="http://ikso.us" xml:lang="en">
            <![CDATA[ <p>Half past November. Work continues as normal.</p>
]]>
        </content>
    </entry>
</feed>